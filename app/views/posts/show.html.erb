<style>
    body {
        background-color: #ffffff;
    }

    .postitem {
        background-color: transparent;
    }
</style>

<div class="postitem" id="<%= @post.id %>">
  <div class="vote">
    <br>
    <button type="button" class="likeButton">
      <i class="fas fa-arrow-up"></i><span> </span><span class="likesCount"><%= @post.likes %></span>
    </button>

    <button type="button" class="dislikeButton">
      <i class="fas fa-arrow-down"></i><span> </span></i><span class="dislikesCount"><%= @post.dislikes %></span>
    </button>
  </div>
  <div class="item">
    <h3><%= link_to @post.title, @post, :class=>'link' %> <span class="domain"> (<%= @post.url %>)</span></h3>
    <h4><span><%= @post.user.name %></span>, <span class="domain createdAt" data-created-at="<%= @post.created_at %>"></span> </h4>
    <p><%= @post.comments.count %> comments</p>
  </div>
</div>

<div class="commentitem">
  <h4>Write your comment here</h4>
  <%= form_with(model: @comment, url: comments_path, method: "post", id: "new-comment-form", class: "new-comment-form") do |form| %>
    <%= form.text_area :body, id: "newCommentText", rows: "4", cols: "50" %>
    <%= form.hidden_field :user_id, value: 1 %> <!-- Set the user_id to the ID of the hardcoded user -->
    <%= form.submit "Add Comment!", class: "commentitem-button" %>
  <% end %>
</div>

<div id="comments" class="comments">
  <% @comments.each do |comment| %>
    <%= render 'comments/comment', comment: comment %>
  <% end %>
</div>

<script>

    function getDynamicValue() {

        var time = new Date();
        var datecreated = new Date('<%= @post.created_at %>');

        var diff = time - datecreated;

        const seconds = Math.floor(diff / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) {
            return days + " days ago";
        } else if (hours > 0) {
            return hours + " hours ago";
        } else if (minutes > 0) {
            return minutes + " minutes ago";
        } else {
            return seconds + " seconds ago";
        }
    }

    document.querySelectorAll(".createdAt").forEach(function(element) {
        element.textContent = getDynamicValue(element.getAttribute('data-created-at'));
    });

    document.querySelectorAll(".postitem").forEach(function(post) {
        var likeButton = post.querySelector(".vote .likeButton");
        var dislikeButton = post.querySelector(".vote .dislikeButton");
        var likesCount = parseInt(post.querySelector(".likesCount").textContent);
        var dislikesCount = parseInt(post.querySelector(".dislikesCount").textContent);

        var liked = false;
        var disliked = false;

        likeButton.addEventListener("click", function() {
            if (!liked) {
                likesCount++;
                likeButton.querySelector(".likesCount").textContent = likesCount;
                likeButton.querySelector(".likesCount").style.color = "#0f0142";
                liked = true;

                if (disliked) {
                    dislikesCount--;
                    dislikeButton.querySelector(".dislikesCount").textContent = dislikesCount;
                    dislikeButton.querySelector(".dislikesCount").style.color = "#8a8a8a";
                    disliked = false;
                }
            } else {
                likesCount--;
                likeButton.querySelector(".likesCount").textContent = likesCount;
                likeButton.querySelector(".likesCount").style.color = "#8a8a8a";
                liked = false;
            }
            sendReaction('<%= @post.id %>', likesCount, dislikesCount);

        });

        dislikeButton.addEventListener("click", function() {
            if (!disliked) {
                dislikesCount++;
                dislikeButton.querySelector(".dislikesCount").textContent = dislikesCount;
                dislikeButton.querySelector(".dislikesCount").style.color = "#0f0142";
                disliked = true;

                if (liked) {
                    likesCount--;
                    likeButton.querySelector(".likesCount").textContent = likesCount;
                    likeButton.querySelector(".likesCount").style.color = "#8a8a8a";
                    liked = false;
                }
            } else {
                dislikesCount--;
                dislikeButton.querySelector(".dislikesCount").textContent = dislikesCount;
                dislikeButton.querySelector(".dislikesCount").style.color = "#8a8a8a";
                disliked = false;
            }
            sendReaction(postId, likesCount, dislikesCount);
        });
    });

    function sendReaction(postId, likesCount, dislikesCount) {
        var url = "/posts/" + postId + "/react";
        var data = {
            likes: likesCount,
            dislikes: dislikesCount
        };

        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then(data => {
                // Update UI with new likes and dislikes counts
                post.querySelector(".likesCount").textContent = data.likes;
                post.querySelector(".dislikesCount").textContent = data.dislikes;
            })
            .catch(error => {
                console.error("There was a problem with the fetch operation:", error);
            });
    }


</script>