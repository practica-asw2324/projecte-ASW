openapi: 3.0.1
info:
  version: 1.0.0
  title: Tuiter
  description: ""

servers:
  - url: https://tuiter.fly.dev/

paths:
  "/posts":
    get:
      tags:
        - Posts
      summary: List all posts
      operationId: getAllPost
      parameters:
        - name: sort
          in: query
          description: Sorting criteria
          required: false
          schema:
            type: string
            enum: [top, newest, commented]
        - name: type
          in: query
          description: Type of posts
          required: false
          schema:
            type: string
            enum: [all, links, threads]
        - name: search
          in: query
          description: Search posts by title or body
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Show All'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      tags:
        - Posts
      summary: Create post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '422':
          description: 'Error: Unprocessable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Result'
              examples:
                errorExample:
                  $ref: '#/components/examples/error422post'


      security:
        - API-KEY: []
  "/posts/{postId}":
    parameters:
      - name: postId
        in: path
        description: id
        required: true
        schema:
          type: string
    get:
      tags:
        - Posts
      summary: Show post
      operationId: getPost
      responses:
        '200':
          description: 'Show'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    put:
      tags:
        - Posts
      summary: Update post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '200':
          description: 'Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: []
    delete:
      tags:
        - Posts
      summary: Delete post
      responses:
        '200':
          description: 'Deleted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Post was successfully destroyed.'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: []
  "/posts/{postId}/like":
    parameters:
      - name: postId
        in: path
        description: id
        required: true
        schema:
          type: string
    post:
      tags:
        - Posts
      summary: Like post
      responses:
        '200':
          description: 'Liked'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've liked this post."
                  likes_count:
                    type: integer
                    example: 1
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: []
    delete:
      tags:
        - Posts
      summary: Delete a post like
      responses:
        '200':
          description: 'Unliked'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've unliked this post."
                  likes_count:
                    type: integer
                    example: 0
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '422':
          description: 'Error: Unprocessable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Result'
              examples:
                errorExample:
                  $ref: '#/components/examples/error422like'
      security:
        - API-KEY: []
  "/posts/{postId}/dislike":
    parameters:
      - name: postId
        in: path
        description: id
        required: true
        schema:
          type: string
    post:
      tags:
        - Posts
      summary: Dislike post
      responses:
        '200':
          description: 'Disliked'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've disiked this post."
                  dislikes_count:
                    type: integer
                    example: 1
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: []
    delete:
      tags:
        - Posts
      summary: Remove a post dislike
      responses:
        '200':
          description: 'Undisliked'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've undisiked this post."
                  dislikes_count:
                    type: integer
                    example: 0
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '422':
          description: 'Error: Unprocessable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Result'
              examples:
                errorExample:
                  $ref: '#/components/examples/error422dislike'
      security:
        - API-KEY: []
  "/posts/{postId}/boost":
    parameters:
      - name: postId
        in: path
        description: Boost Post
        required: true
        schema:
          type: string
    post:
      tags:
        - Posts
      summary: Boost post
      responses:
        '200':
          description: 'Boosted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've boosted this post."
                  boosts_count:
                    type: integer
                    example: 1
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: []
    delete:
      tags:
        - Posts
      summary: Delete a boost
      responses:
        '200':
          description: 'Unboosted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've unboosted this post."
                  boosts_count:
                    type: integer
                    example: 0
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        '422':
          description: 'Error: Unprocessable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Result'
              examples:
                errorExample:
                  $ref: '#/components/examples/error422boost'
      security:
        - API-KEY: []
  "/users":
    get:
      tags:
        - Users
      summary: List all users
      operationId: getAllUser
      responses:
        '200':
          description: 'Show All'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  "/users/{userId}":
    parameters:
      - name: userId
        in: path
        description: id
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Show user
      operationId: getUser
      responses:
        '200':
          description: 'Show'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    put:
      tags:
        - Users
      summary: Update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: 'Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
        - API-KEY: [ ]
    delete:
      tags:
        - Users
      summary: Delete user
      responses:
        '200':
          description: 'Deleted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User was successfully destroyed.'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
        - API-KEY: [ ]

  "/posts/{postId}/comments":
    parameters:
      - name: postId
        in: path
        description: id
        required: true
        schema:
          type: string
    get:
      tags:
        - Comments
      summary: List comments for a post
      operationId: getPostComments
      responses:
        '200':
          description: 'Show'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    post:
      tags:
        - Comments
      summary: Add a comment to a post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
      security:
        - API-KEY: []

  "/posts/{postId}/comments/{commentId}":
    parameters:
      - name: postId
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
      - name: commentId
        in: path
        description: ID of the comment
        required: true
        schema:
          type: string
    delete:
      tags:
        - Comments
      summary: Delete a comment from a post
      responses:
        '200':
          description: 'Deleted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Comment was successfully destroyed.'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: []
    put:
      tags:
        - Comments
      summary: Update comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        '200':
          description: 'Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: []

  "/posts/{postId}/comments/{commentId}/like":
    parameters:
      - name: postId
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
      - name: commentId
        in: path
        description: ID of the comment
        required: true
        schema:
          type: string
    put:
      tags:
        - Comments
      summary: Like comment
      responses:
        '200':
          description: 'Liked'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've liked this comment."
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: [ ]

  "/posts/{postId}/comments/{commentId}/dislike":
    parameters:
      - name: postId
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
      - name: commentId
        in: path
        description: ID of the comment
        required: true
        schema:
          type: string
    put:
      tags:
        - Comments
      
      summary: Dislike comment
      responses:
        '200':
          description: 'Disliked'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You've disiked this comment."
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
        - API-KEY: [ ]
  "/magazines":
    get:
      tags:
        - Magazines
      summary: List all magazines
      operationId: getAllMagazines
      parameters:
        - name: sort
          in: query
          description: Sorting criteria
          required: false
          schema:
            type: string
            enum: [posts, comments, subscriptions]
      responses:
        '200':
          description: 'Show All'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Magazine'
    post:
      tags:
        - Magazines
      summary: Create magazine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMagazine'
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '422':
          description: 'Error: Unprocessable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Result'
      security:
        - API-KEY: [ ]

  "/magazines/{magazineId}":
    parameters:
      - name: magazineId
        in: path
        description: id
        required: true
        schema:
          type: string
    get:
      tags:
        - Magazines
      summary: Show magazine
      operationId: getMagazine
      responses:
        '200':
          description: 'Show'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    put:
      tags:
        - Magazines
      summary: Update magazine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMagazine'
      responses:
        '200':
          description: 'Updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
        - API-KEY: [ ]
    delete:
      tags:
        - Magazines
      summary: Delete magazine
      responses:
        '200':
          description: 'Deleted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Magazine was successfully destroyed.'
        '401':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '403':
          description: 'Error: Unauthorised'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
        - API-KEY: [ ]
  /magazines/{id}/subscribe:
    parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
    post:
      tags:
        - Magazines
      summary: Subscribe to a magazine
      operationId: subscribeMagazine
      parameters:
        - name: id
          in: path
          description: ID of the magazine to subscribe to
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully subscribed to the magazine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagazineActionMessage'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Result'
      security:
        - API-KEY: [ ]
  /magazines/{id}/unsubscribe:
    parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
    delete:
      tags:
        - Magazines
      summary: Unsubscribe from a magazine
      operationId: unsubscribeMagazine
      parameters:
        - name: id
          in: path
          description: ID of the magazine to unsubscribe from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully unsubscribed from the magazine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagazineActionMessage'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Result'
      security:
        - API-KEY: [ ]

components:
  securitySchemes:
    API-KEY:
      type: apiKey
      name: API-KEY
      in: header

  schemas:
    NewPost:
      type: object
      properties:
        title:
          type: string
          example: 'post title'
        body:
          type: string
          example: 'post body'
        magazine_id:
          type: integer
          format: int64
          example: 1
        url:
          type: string
          example: 'google.com'

    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          minLength: 4
          example: 'My name'
        body:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        url:
          type: string
          format: url
          example: google.com
        created_at:
          type: string
          format: date-time
        comments_count:
          type: integer
          format: int64
          example: 0
        likes_count:
          type: integer
          format: int64
          example: 0
        dislikes_count:
          type: integer
          format: int64
          example: 0
        boosts_count:
          type: integer
          format: int64
          example: 0
        user_name:
          type: string
          example: author
        magazine_name:
          type: string
          example: magazine
        magazine_id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
    User:
      type: object
      properties:
        username:
          type: string
          example: 'Username'
        description:
          type: string
          example: 'User description'
        avatar:
          type: string
          format: url
          description: 'URL for the avatar image'
        cover:
          type: string
          format: url
          description: 'URL for the cover image'
        created_at:
          type: string
          format: date-time
        posts_count:
          type: integer
          format: int64
          example: 0
        comments_count:
          type: integer
          format: int64
          example: 0
        boosts_count:
          type: integer
          format: int64
          example: 0
    UpdateUser:
      type: object
      properties:
        username:
          type: string
          example: 'Username'
        description:
          type: string
          example: 'User description'
        avatar:
          type: string
          format: url
          description: 'URL for the avatar image. This field expects a URL, not a file upload.'
        cover:
          type: string
          format: url
          description: 'URL for the cover image. This field expects a URL, not a file upload.'
    ErrorResult:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    Error422Result:
      type: object
      additionalProperties:
        type: array
        items:
          type: string

    NewComment:
      type: object
      properties:
        body:
          type: string
          example: 'This is a comment'
        comment_id:
          type: integer
          format: int64
          example: 1
          description: 'Optional. If present, this comment is a reply to the comment with this ID.'

    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        body:
          type: string
          example: 'This is a comment'
        createdAt:
          type: string
          format: date-time
        user_name:
          type: string
          example: author
        post_title:
          type: string
          example: post
        replies_count:
          type: integer
          format: int64
          example: 0
        likes_count:
          type: integer
          format: int64
          example: 0
        dislikes_count:
          type: integer
          format: int64
          example: 0
          
    NewMagazine:
       type: object
       properties:
         name:
           type: string
           example: 'Magazine name'
         title:
           type: string
           example: 'Magazine title'
         description:
           type: string
           example: 'Magazine description'
         rules:
             type: string
             example: 'Magazine rules'
    Magazine:
       type: object
       properties:
         id:
           type: integer
           format: int64
           example: 1
         name:
           type: string
           example: 'Magazine name'
         title:
           type: string
           example: 'Magazine title'
         description:
           type: string
           example: 'Magazine description'
         rules:
           type: string
           example: 'Magazine rules'
         created_at:
           type: string
           format: date-time
         posts_count:
           type: integer
           format: int64
           example: 0
         comments_count:
           type: integer
           format: int64
           example: 0
         subscribers_count:
           type: integer
           format: int64
           example: 0
    MagazineActionMessage:
       type: object
       properties:
         action:
           type: string
         magazineId:
           type: integer
         message:
           type: string

  examples:
    error404:
      value:
        message: "Record not found"
    error403:
      value:
        message: "You are not authorized to perform this action."
    error401:
      value:
        message: "Invalid API-KEY"
    error422post:
      value:
        title: ["can't be blank"]
        magazine: ["must exist"]
    error422like:
      value:
        error: "Unable to unlike this post."
    error422dislike:
      value:
        error: "Unable to undislike this post."
    error422boost:
      value:
        error: "Unable to unboost this post."